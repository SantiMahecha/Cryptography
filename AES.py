# -*- coding: utf-8 -*-
"""AES

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bbfASnld3aLFF08N_jaTQZU2paF2Fus2

**Instalamos la implementación de AES en Python**
"""

pip install pyaes

"""**Añadimos librerias correspondientes**"""

# Commented out IPython magic to ensure Python compatibility.
from pyaes import *
import os
import time
import base64
import numpy as np
# %pylab inline
import matplotlib.pyplot as plt
# %matplotlib inline
import matplotlib.image as mpimg
from skimage import io

"""**Funcion para separar extensión de archivo**"""

def splitfilename(filename):
    sname=""
    sext=""
    i=filename.rfind(".")
    if(i!=0):
        n=len(filename)
        j=n-i-1
        sname=filename[0:i]
        sext=filename[-j:]    
    return sname, sext

def aes_():
  print("Key (%i bits): "%i,end='')
  print(key)
  im = input("Input file's name with its extension: ")
  ext = splitfilename(im)#Split file extension from filename
  with open(im, "rb") as image:
    image_format = image.read()#Read image file
  aes = pyaes.AESModeOfOperationCTR(key) #Applying AES
  ciphertext = aes.encrypt(image_format) #Cipher image text
  b_64 = base64.b64encode(ciphertext) #ciphertext into base64
  print("Mensaje cifrado en Base64: ",b_64)
  not_b_64 = base64.b64decode(b_64) #not base 64 ciphertext
  aes = pyaes.AESModeOfOperationCTR(key)# The counter mode of operation maintains state, so decryption requires
# a new instance be created
  plaintext = aes.decrypt(not_b_64) #Find plaintext
  with open("descrypted_image.%s" % ext[1], "wb") as image:#Open & create descrypted image file
    o = image.write(plaintext)#Fill it with data_descrypted
  print("Imagen final: \n")
  new_image=io.imread("descrypted_image.%s" % ext[1])
  plt.imshow(new_image)#Showing new image

print("****AES(Advanced Encryption Standard) Laboratory - smahechap@unal.edu.co****\n")

s=0
while(s == 0):
    print("\n\nChoose the operation mode:")
    choice=int(input("\n 1.128 bits \n 2.192 bits \n 3.256 bits\n 4.Exit\n\n"))
    print("\n")
    if choice==1:
        key = os.urandom(16) #Generate a random 128 bits key.
        i = 128 
        s = 1
    elif choice==2:
        key = os.urandom(24) #Generate a random 192 bits key.
        i = 192
        s = 1
    elif choice==3:
        key = os.urandom(32) #Generate a random 256 bits key.
        i = 256
        s = 1
    elif choice==4:
        s = 1
    else:
        print("Choose a correct answer\n")

aes_()
